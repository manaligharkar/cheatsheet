Branching strategies: https://nvie.com/posts/a-successful-git-branching-model/
The central repo holds two main branches with an infinite lifetime:
master
develop
The different types of branches we may use are:
Feature branches
Release branches
Hotfix branches
--------------------------------------------------
#Feature branches 
May branch off from:
develop
Must merge back into:
develop
Branch naming convention:
anything except master, develop, release-*, or hotfix-*
#Release branches 
May branch off from:
develop
Must merge back into:
develop and master
Branch naming convention:
release-*
#Hotfix branches 
May branch off from:
master
Must merge back into:
develop and master
Branch naming convention:
hotfix-*
==================================
mgharkar@DIN22008500 MINGW64 ~/Documents/test1 (master)
$ cd .git/

mgharkar@DIN22008500 MINGW64 ~/Documents/test1/.git (GIT_DIR!)
$ ls -lta
total 11
drwxr-xr-x 1 mgharkar 1049089   0 Dec 31 01:22 ./
-rw-r--r-- 1 mgharkar 1049089 130 Dec 31 01:22 config
drwxr-xr-x 1 mgharkar 1049089   0 Dec 31 01:22 objects/   --> it contain all commits and all
-rw-r--r-- 1 mgharkar 1049089  23 Dec 31 01:22 HEAD
drwxr-xr-x 1 mgharkar 1049089   0 Dec 31 01:22 refs/
drwxr-xr-x 1 mgharkar 1049089   0 Dec 31 01:22 info/
drwxr-xr-x 1 mgharkar 1049089   0 Dec 31 01:22 hooks/
-rw-r--r-- 1 mgharkar 1049089  73 Dec 31 01:22 description
drwxr-xr-x 1 mgharkar 1049089   0 Dec 31 01:22 ../
.git contains all information required for version control. If you want to clone your repo, copy .git is enough.
The .git folder contains all the information that is necessary for your project in version control and all the information about commits, remote repository address, etc. 
All of them are present in this folder. 
It also contains a log that stores your commit history so that you can roll back to history.
mgharkar@DIN22008500 MINGW64 ~/Documents/test1/.git/objects (GIT_DIR!)
$ ls -lrt
total 0
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:22 pack/
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:22 info/
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:30 64/
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:30 84/
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:30 6a/
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:33 4b/
drwxr-xr-x 1 mgharkar 1049089 0 Dec 31 01:33 a7/


===========================================================================
git reset  -->undoing chnages for stage area

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ ls
p1  p2  p3  p4  p5
mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git log --oneline
f948b59 (HEAD -> master) added2
3dd4cf0 added p2
34679e0 1st p1
mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git reset --hard 3dd4cf0
HEAD is now at 3dd4cf0 added p2

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git log --oneline
3dd4cf0 (HEAD -> master) added p2
34679e0 1st p1
mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ ls
p1  p2
====================================
mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git status
On branch master
nothing to commit, working tree clean

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git reset

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git status
On branch master
nothing to commit, working tree clean

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git reset 34679e0

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        p2

nothing added to commit but untracked files present (use "git add" to track)

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
==================================================git revert=============================================
note--revert--adds new commit by reverting commit mentioned.
mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git log --oneline
670c6bf (HEAD -> master) added p2
34679e0 1st p1
mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git revert HEAD
Removing p2
[master 33e661e] Revert "added p2"
 Committer: Gharkar <manali.gharkar@capgemini.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 p2

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ ls
p1

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git log --oneline
33e661e (HEAD -> master) Revert "added p2"
670c6bf added p2
34679e0 1st p1

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$ git status
On branch master
nothing to commit, working tree clean

mgharkar@DIN22008500 MINGW64 ~/Desktop/Appr/test2 (master)
$

========================================


